# Credit: 
name: CMake CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        # TODO: Windows builds
        # - {
        #     name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
        #     os: windows-latest,
        #     build_type: "Release", cc: "cl", cxx: "cl",
        #     environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        #   }
        # - {
        #     name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
        #     os: windows-latest,
        #     build_type: "Release", cc: "gcc", cxx: "g++"
        #   }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: "Release", cc: "gcc", cxx: "g++",
            install-command: "cmake --build build --target install && strip instdir/App"
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++",
            install-command: "cmake --install build --prefix instdir --strip"
          }

    steps:
    - uses: actions/checkout@v1

    - name: Download GLFW
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(COMMAND sudo apt-get install libglfw3-dev)
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          execute_process(COMMAND brew install glfw)
        endif()

    - name: Create output directories
      run: |
        mkdir build
        mkdir instdir
    
    - name: Configure
      working-directory: build
      run: cmake ..

    - name: Build
      run: cmake --build build

    - name: Install stripped binary
      run: ${{matrix.config.install-command}}

    - name: Pack build artifacts
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ matrix.config.artifact }} .

    - name: Upload package
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: ubuntu-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar
