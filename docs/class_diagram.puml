@startuml





/' Objects '/

abstract class AsyncRenderer {
	+AsyncRenderer(const std::string& vName, const std::string& fName)
	-dataMutex : std::mutex
	+fillBuffers() : void
	+{abstract} fillBuffersSync() : void
	+render() : void
	+{abstract} renderSync() : void
}


class Block {
	+Block(Type)
	+type : Type
	+getFace(Block:: Face) : [ [ nodiscard ] ] std::vector<float> {query}
	+{static} transparency_table : static const bool
	+operator<<(std::ostream &, const Block &) : std : : ostream&
}


class Branch {
	+Branch(int level)
	+Branch(int level, int x0, int z0)
	+~Branch()
	+ : Node*
	+descent(int x, int z) : Node*
	+makeChild(int x, int z) : Node*
	+q1 : Node*
	+q3 : Node*
	+ : Node**
	+ : Node**
}


abstract class BufferObject <template<typename T>> {
	#BufferObject()
	#{abstract} size() : [ [ nodiscard ] ] size_t {query}
	#buffer_size : size_t
	#bufferVector(const std::vector<T> &, GLenum) : void
}


class BufferType <template<typename T>> {
	+{static} Type : static unsigned int const
}


class Chunk {
	+Chunk(int x0, int z0)
	+~Chunk()
	+getAt(int x, int y, int z) : [ [ nodiscard ] ] Block*
	-at(int, int, int) : [ [ nodiscard ] ] constexpr auto&
	-x0 : const int
	-z0 : const int
	-{static} HEIGHT : static const int
	+{static} SIDE : static const int
	-{static} NEXT_ID : static u_int
	-blocks : std::vector<Block*>
	+id : u_int
	+generate(int seed) : void
	+placeAt(int x, int y, int z, Block* block) : void
	+removeAt(int x, int y, int z) : void
}


class ChunkSector {
	+ChunkSector(std::vector<Chunk*> chunks, int side)
	+getAt(int x, int y, int z) : [ [ nodiscard ] ] Block* {query}
	+getInstanceMesh() : [ [ nodiscard ] ] InstanceMesh {query}
	+getQuadMesh() : [ [ nodiscard ] ] QuadMesh {query}
	-at(int x, int z) : [ [ nodiscard ] ] constexpr auto& {query}
	-side : const int
	-chunks : std::vector<Chunk*>
}


abstract class Controller {
	+{abstract} update() : void
}


class CubeTexture {
	+CubeTexture(const std::string& name, int target, const std::string& directory, bool flip)
	+use() : void {query}
}


class EBO {
	+EBO()
	+size() : [ [ nodiscard ] ] size_t {query}
	-indices : std::vector<unsigned int>
	+bufferData() : void
	+fill(const std::vector<unsigned int>& vec) : void
}


class Event <template<class ...Args>> {
	+subscribe(const callback_t<Args>& callback) : handle_t
	-handlers : std::forward_list<Handler<Args> >
	+raise(Args targets) : void
	+remove(handle_t handle) : void
}


class Game {
	-Game()
	+{static} getInstance() : Game&
	+operator=(const Game &) : Game&
	+player : Player
	+world : World
	+{static} chunkLoadingDistance : static const int
}


class Handler <template<class ...Args>> {
	+Handler(callback_t<Args> callback)
	+callback : callback_t<Args>
	+handle : handle_t
	-{static} nextHandle : static handle_t
}


abstract class InputController {
	+InputController(GLFWwindow*)
	#window : GLFWwindow*
	-lastUpdate : double
	+{abstract} processKeyboard(int keyCode, double deltaTime) : void
	+{abstract} processMouseMovement(double xOff, double yOff) : void
	+registerMouseHandler() : void {query}
	+update() : void
}


class InstanceMesh {
	+operator<<(std::ostream& out, const InstanceMesh& mesh) : std : : ostream&
	+offsets : std::vector<float>
	+typeInfos : std::vector<float>
	+addCube(float x, float y, float z, Block::Type texId, Block::Face faceId) : void
	+operator+=(const InstanceMesh& other) : void
}


class InstancingRenderer {
	+InstancingRenderer()
	-texture : Texture2D
	-bufferedInstances : unsigned int
	+bufferData() : void
	+fillBuffersSync() : void
	+renderSync() : void
}


class Leaf {
	+Leaf(int x0, int z0)
	+chunk : Chunk
}


class Log {
	-{static} getLevelMessage(Level level) : constexpr auto
	+{static} setLoggingLevel(Level level) : constexpr void
	-{static} loggingLevel : static Level
	-{static} clearColor() : void
	+{static} debug(Args args) : void
	+{static} error(Args args) : void
	+{static} info(Args args) : void
	-{static} logAt(Level level, Args args) : void
	-{static} setColor(__unused Level level) : void
	+{static} warn(Args args) : void
}


class MeanScopedTimer {
	+MeanScopedTimer(const std::string& message)
	+~MeanScopedTimer()
	-{static} times : static std::map<std::string, std::pair<double, double> >
}


class MovementController {
	+MovementController(GLFWwindow*)
	+processKeyboard(int keyCode, double deltaTime) : void
	+processMouseMovement(double xOff, double yOff) : void
}


class Node {
	+Node(int level)
	+Node(int level, int x0, int z0)
	+~Node()
	+getExtent() : [ [ nodiscard ] ] double {query}
	+level : int
	+x0 : int
	+z0 : int
}


class Player {
	+Player(const glm::vec3& position)
	+chunkChanged : Event<>
	+getFPMatrix() : [ [ nodiscard ] ] glm::mat4 {query}
	+getFront() : [ [ nodiscard ] ] glm::vec3 {query}
	+headPitch : double
	+headYaw : double
	+position : glm::vec3
	-currentChunkID : int
	-{static} MOVEMENT_SPEED : static constexpr const float
	+move(const glm::vec3 &) : void
}


class Program {
	+Program(const std::string &, const std::string &)
	+Program(const Program &)
	+operator=(const Program &) : Program&
	+getId() : [ [ nodiscard ] ] unsigned int {query}
	-Id : unsigned int
	-fragmentShader : unsigned int
	-{static} loadShader(const std::string& path, int type) : unsigned int
	-vertexShader : unsigned int
	+setUniform(const std::string& name, float value) : void {query}
	+setUniform(const std::string& name, bool value) : void {query}
	+setUniform(const std::string& name, int value) : void {query}
	+setUniform(const std::string& name, const glm::vec3& value) : void {query}
	+setUniform(const std::string& name, const glm::mat4& value) : void {query}
	+use() : void {query}
}


class QuadMesh {
	+operator<<(std::ostream& out, const QuadMesh& mesh) : std : : ostream&
	+texCoords : std::vector<float>
	+vertices : std::vector<float>
	+indices : std::vector<u_int>
	+addQuad(const std::vector<float>& vs, Block::Type texId, Block::Face faceId) : void
	+operator+=(const QuadMesh& other) : void
}


class QuadRenderer {
	+QuadRenderer()
	-indices : EBO
	-texture : Texture2D
	+bufferData() : void
	+fillBuffersSync() : void
	+renderSync() : void
}


class QuadTree {
	+QuadTree(int depth)
	-root : Branch
	+getSurrounding(int x, int z, int radius) : ChunkSector
	-leafAt(int x, int z) : Leaf*
	+chunkIDAt(int x, int z) : int
	+insert(int x, int y, int z, Block*) : void
	+remove(int x, int y, int z) : void
}


abstract class Renderer {
	#Renderer(const std::string &, const std::string &)
	+~Renderer()
	#program : Program
	#bufferedElements : size_t
	#{abstract} bufferData() : void
	+{abstract} fillBuffers() : void
	+render() : void
}


class RenderingView {
	+RenderingView(Renderer* renderer)
	#renderer : std::unique_ptr<Renderer>
	+refresh() : void
}


class ScopedTimer {
	+ScopedTimer(const std::string& message)
	+~ScopedTimer()
}


class SkyBoxRenderer {
	+SkyBoxRenderer()
	-bufferData() : void
	+fillBuffers() : void
	+render() : void
}


abstract class Texture {
	+Texture(std::string name, int target)
	+~Texture()
	+target : int
	+name : std::string
	+bind(const Program &) : void
	+{abstract} use() : void {query}
}


class Texture2D {
	+Texture2D(const std::string& name, int target, const std::string& path, bool flip)
	+use() : void {query}
}


class Timer {
	+Timer(std::string message)
	#start : std::chrono::steady_clock::time_point
	#message : std::string
}


class VBO <template<typename T, unsigned int N>> {
	+VBO(unsigned int location)
	+size() : [ [ nodiscard ] ] size_t {query}
	-data : std::vector<T>
	-location : unsigned int
	+bufferData() : void
	+fill(const std::vector<T>& vec) : void
}


class View {
	#View()
	+~View()
	-subviews : std::vector<std::unique_ptr<View> >
	+addView(View*) : void
	+refresh() : void
}


class WindowView {
	+WindowView(int, int) noexcept(false)
	+WindowView(const WindowView &)
	+WindowView(WindowView& &)
	+~WindowView()
	-window : GLFWwindow*
	+operator=(const WindowView &) : WindowView&
	+operator=(WindowView& &) : WindowView&
	+getWindow() : [ [ nodiscard ] ] GLFWwindow* {query}
	+mainLoop(Controller* controller) : void
}


class World {
	+World()
	+tree : QuadTree
	+removeBlock(int, int, int) : [ [ maybe_unused ] ] void
	-{static} SIDE : static const unsigned int
	+placeBlock(int, int, int, Block:: Type) : void
}





/' Inheritance relationships '/

AsyncRenderer <|-- InstancingRenderer


AsyncRenderer <|-- QuadRenderer


BufferObject <|-- EBO


BufferObject <|-- VBO


Controller <|-- InputController


InputController <|-- MovementController


Node <|-- Branch


Node <|-- Leaf


Renderer <|-- AsyncRenderer


Renderer <|-- SkyBoxRenderer


Texture <|-- CubeTexture


Texture <|-- Texture2D


Timer <|-- MeanScopedTimer


Timer <|-- ScopedTimer


View <|-- RenderingView


View <|-- WindowView





/' Aggregation relationships '/

Branch "5" o-- Node


Chunk o-- Block


ChunkSector o-- Chunk


Event *-- Handler


Game *-- Player


Game *-- World


InstancingRenderer *-- Texture2D


Leaf *-- Chunk


Player *-- Event


QuadRenderer *-- EBO


QuadRenderer *-- Texture2D


QuadTree *-- Branch


Renderer *-- Program


RenderingView *-- Renderer


View *-- View


World *-- QuadTree





@enduml
